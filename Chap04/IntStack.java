package Chap04;

import java.util.Scanner;



public class IntStack {
	

	private int max; // 스택의 용량
	private int ptr; // 스택 포인터 (차 있는 정도 만약 꽉 차 있으면 max랑 같음)
	private int[] stk; // 스택 본체

	// 실행 시 예외 : 스택이 비어 있음...empty
	public class EmptyIntStackException extends RuntimeException {
		public EmptyIntStackException() {
		}
	}

	// 실행 시 예외 : 스택이 가득 참...full
	public class OverflowIntStackException extends RuntimeException {
		public OverflowIntStackException() {
		}
	}

	// 생성자
	public IntStack(int capacity) {
		ptr = 0;
		max = capacity;
		try {
			stk = new int[max]; // 스택 본체용 배열을 생성
		} catch (OutOfMemoryError e) { // 생성할 수 없음.
			max = 0;
		}

	}

	public int push(int x) throws OverflowIntStackException {
		if (ptr >= max) { // 만약 ptr이 max(Stack에 용량)보다 크면 Exception에 던진다.
			throw new OverflowIntStackException();
		}
		return stk[ptr++] = x; // push하게 되면 stk의 ptr값을 하나 씩 증가하고 x값을 대입한다.
	}

	public int pop() throws EmptyIntStackException {
		if (ptr <= 0) {
			throw new EmptyIntStackException();
		}
		return stk[ptr--];
	}

	public int peek() throws EmptyIntStackException {
		// 몰래 엿보는 메서드 스택이 비어있는 경우 예외 처리
		if (ptr <= 0) {
			throw new EmptyIntStackException();
		}
		return stk[ptr - 1];// 스택이 비어있지 않으면 꼭대기의 요소[stk[ptr-1]반환
	}

	// 스택에서 x를 찾아 인덱스(없으면-1)를 반환
	public int indexOf(int x) {
		for (int i = ptr - 1; i >= 0; i--) {
			if (stk[i] == x) {
				return i;
			}
		}
		return -1;
	}

	// 스택을 비움
	public void clear() {
		ptr = 0;
	}

	// 스택의 용량을 반환(알아보는 용도)
	public int capacity() {
		return max;
	}

	// 스택에 쌓여 있는 데이터의 수
	public int Size() {
		return ptr;
	}

	// 스택이 비어 있는가?
	public boolean isEmpty() {
		return ptr <= 0;
	}

	// 스택이 가득 차 있는가
	public boolean isFull() {
		return ptr >= max;
	}

	// 스택 안의 모든 데이터를 바닥-> 꼭대기 순서로 출력
	public void dump() {
		if (ptr <= 0) {
			System.out.println("스택이 비어있습니다.");

		} else {
			for (int i = 0; i < ptr; i++) {
				System.out.print(stk[i] + " ");

			}
			System.out.println();
		}
	}

}
